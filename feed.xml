<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <description>このウェブサイトでは、r7kamura (Ryo Nakamura) が、日々の生活やプログラミングに関する記事を公開しています。</description>
    <link>https://r7kamura.com</link>
    <atom:link href="https://r7kamura.com/feed.xml" rel="self"/>
    <title>r7kamura.com</title>
    <managingEditor>r7kamura@gmail.com (Ryo Nakamura)</managingEditor>
    <lastBuildDate>Fri, 27 Nov 2020 14:18:24 +0000</lastBuildDate>
    
    <item>
      <title><![CDATA[分解して洗えるキッチンばさみ]]></title>
      <description><![CDATA[無印良品の分解して洗えるキッチンばさみを気に入っている。]]></description>
      <link>https://r7kamura.com/articles/2020-11-27-kitchen-scissor</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>無印良品の<a href="https://www.amazon.co.jp/dp/B087RXPTWY?tag=r7kamura07-22">分解して洗えるキッチンばさみ</a>を気に入っている。</p>

<p><a href="https://i.imgur.com/nxdCchB.jpg" target="_blank"><img src="https://i.imgur.com/nxdCchBh.jpg" alt=""></a></p>

<p>頑丈かつほど良い大きさ。真空パックに入ったものとか肉とかをよく切るので、毎度分解して洗えるのがやはり良い。包丁を毎度洗うのと同じだ。</p>

<p><a href="https://i.imgur.com/BTvFzq6.jpg" target="_blank"><img src="https://i.imgur.com/BTvFzq6h.jpg" alt=""></a></p>

<p>切れ味もまずまず良い。さすがに蟹とか切ろうとしたら難しいのかもしれないが、蟹は高くて庶民には手が出ないので問題無い。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-27-kitchen-scissor</guid>
    </item>
    
    <item>
      <title><![CDATA[稲作、納税、コーディング、Podcast]]></title>
      <description><![CDATA[稲作のゲームをしたり、納税手続きをしたり、コードを書いたり、Podcastを録ったりして過ごした。]]></description>
      <link>https://r7kamura.com/articles/2020-11-24-farm-tax-code-podcast</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>稲作のゲームをしたり、納税手続きをしたり、コードを書いたり、Podcastを録ったりして過ごした。</p>

<h2>稲作</h2>

<p>『<a href="https://www.marv.jp/special/game/sakuna/">天穂のサクナヒメ</a>』という、稲作のゲームをやっている。リアルワールドの農法について調べながら進めることにしている。プレイ時間は6時間だが、稲作について調べながらインターネットを見ている時間もおよそ6時間ぐらいだ。</p>

<h2>納税</h2>

<p>所得税、の予定納税の窓口振込をした。米、納税。年貢だ。振替納税にしておけば良いのだが、2年で転居することを考えると、6回の窓口振込のために振替納税手続きをするのは果たしてコスパが良いのか。とはいえ、昨今の情勢を鑑みるに、外に出向かずとも良いというだけでも大きな利点かもしれない。振替納税の手続きをやってみようと思う。</p>

<h2>Weneedfeed</h2>

<p>フィードリーダーで使うためのツールの開発を粛々と進めている。読んでいるWebコミックの作品ごとのフィードを1日1回生成して、更新通知を受け取ったりしている。このツールについては、以前に<a href="https://r7kamura.com/articles/2020-11-15-weneedfeed">Weneedfeed</a>という記事にも書いた。最低限の機能は完成しているので、使い勝手を上げる改善がこれから入っていくだろう。</p>

<h2>Rdown</h2>

<p><a href="https://github.com/r7kamura/rdown">Rdown</a>というパーサーをつくってみている。Rubyのリファレンスマニュアルで使われている実装への理解を深めることが目的だ。まともなパーサーを書いたことがないので、雰囲気でやっている。</p>

<h2>Podcast</h2>

<p><a href="https://yatteiki.fm">yatteiki.fm</a>というPodcastで、2020年に買って良かったものについて話した。<a href="/articles/2020-11-23-good-buy-2020">買って良かったもの 2020年版</a>という記事にも、別途テキストでまとめた。いま思うと、衣類についての話も書けば良かったかもしれない。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-24-farm-tax-code-podcast</guid>
    </item>
    
    <item>
      <title><![CDATA[買って良かったもの 2020年版]]></title>
      <description><![CDATA[買って良かったものを年末にまとめる回、2020年版。]]></description>
      <link>https://r7kamura.com/articles/2020-11-23-good-buy-2020</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>買って良かったものを年末にまとめる回、2020年版。</p>

<p>大まかに分けると、以下の順に並んでいる。</p>

<ol>
<li>生活</li>
<li>作業</li>
<li>余暇</li>
</ol>

<p>各節の先頭にはAmazonの商品ページへのリンクを、末尾にはこのウェブサイトで取り上げたときの記事へのリンクを置いている。</p>

<h2>自動調理器</h2>

<p>シャープの自動調理器、<a href="https://www.amazon.co.jp/dp/B08HMF4W7S?tag=r7kamura07-22">ホットクック</a>。</p>

<figure><a href="https://i.imgur.com/ganhD5k.jpg" target="_blank"><img src="https://i.imgur.com/ganhD5kh.jpg" alt="" title="具材をぶち込んでボタンを押せば完成"></a><figcaption>具材をぶち込んでボタンを押せば完成</figcaption></figure>

<p>今年はこれのおかげで毎日自炊が続いた。これからも続くだろう。カレーや鍋、低温調理、<a href="/articles/2020-10-29-tsukurioki">つくりおき</a>など用途はいろいろ。9月に2020年モデルのホットクックが出たので、今から買うならこちらが良い。内鍋がフッ素加工されているのと、蒸しカゴが付いている違いが大きい。</p>

<p><a href="/articles/2019-12-22-hot-cook">ホットクック KN-HW16E-R</a>でも紹介した。</p>

<h2>ホットサンドメーカー</h2>

<p>燕三条の<a href="https://www.amazon.co.jp/dp/B081CKFWYV?tag=r7kamura07-22">ホットサンドメーカー</a>。</p>

<figure><a href="https://i.imgur.com/awBMXYN.jpg" target="_blank"><img src="https://i.imgur.com/awBMXYNh.jpg" alt="" title="生卵を入れるときは弱火で時間を掛けて焼くと良い"></a><figcaption>生卵を入れるときは弱火で時間を掛けて焼くと良い</figcaption></figure>

<p>主に朝食としてホットサンドをつくるのに使っている。1人では食べ切れないという人向けに、最近では更に半分のサイズのものも発売された。実はちょっとした肉や魚介類を焼いたりするのにも優秀で、余った鶏皮なんかをよく焼いている。油が跳ねないし熱も閉じ込められるしひっくり返せるしで色々と便利。</p>

<h2>ツールハンガー・吸盤式</h2>

<p>レックの<a href="https://www.amazon.co.jp/dp/B073J5NZK2?tag=r7kamura07-22">吸盤式のツールハンガー</a>。</p>

<figure><a href="https://i.imgur.com/sbVUHLu.jpg" target="_blank"><img src="https://i.imgur.com/sbVUHLuh.jpg" alt="" title="よく使う調理器具を吊っている"></a><figcaption>よく使う調理器具を吊っている</figcaption></figure>

<p>レバー式の吸盤が強力でびくともしない。伸縮・回転するので設置しやすいのも地味に良いところ。調理器具を引き出しに仕舞うと出し入れに一手間増えて面倒なので、特によく使うものは全部ここに吊っている。</p>

<p><a href="/articles/2020-10-08-kitchen-tool-hanger">キッチンツールハンガー</a>でも紹介した。</p>

<h2>タオルハンガー・磁石式</h2>

<p>山崎実業の<a href="https://www.amazon.co.jp/dp/B07MCBSGDJ?tag=r7kamura07-22">磁石式のツールハンガー</a>。</p>

<figure><a href="https://i.imgur.com/HVL3MYh.jpg" target="_blank"><img src="https://i.imgur.com/HVL3MYhh.jpg" alt="" title="シャンプーなどを吊っている"></a><figcaption>シャンプーなどを吊っている</figcaption></figure>

<p>これの導入を機に一気に浴室周りの改善が進み、生活の質が向上した。別の箇所にもう1つあり、そちらは主に掃除用品など雑多なものが掛かっている。床に物がないと掃除が捗る。</p>

<p><a href="/articles/2020-10-11-hanging-shampoo">シャンプーとかを壁に吊る</a>でも紹介した。</p>

<h2>作業机</h2>

<p>かなでものの大きな作業机。</p>

<figure><a href="https://i.imgur.com/SVBHILN.jpg" target="_blank"><img src="https://i.imgur.com/SVBHILNh.jpg" alt="" title="机とサメ"></a><figcaption>机とサメ</figcaption></figure>

<p>幅180cm、奥行き80cmで広々使える。気に入った道具で作業すると気分が上がる。<a href="https://kanademono.design/">かなでもの</a>は、株式会社bydesignという成長中の会社がやっているD2C (Direct to Consumerの略で、製造した商品を消費者に直接販売する形態) なブランドで、そのシンプルで丁寧な姿勢を応援したい気持ちがある。</p>

<p><a href="/articles/2020-10-09-desk">かなでものの机</a>でも紹介した。</p>

<h2>ウェブカメラ</h2>

<p>ロジクールのウェブカメラ、<a href="https://www.amazon.co.jp/dp/B086R71LGW?tag=r7kamura07-22">C980GR</a>。</p>

<figure><a href="https://i.imgur.com/jEjATKT.jpg" target="_blank"><img src="https://i.imgur.com/jEjATKTh.jpg" alt="" title="ウェブカメラとディスプレイ"></a><figcaption>ウェブカメラとディスプレイ</figcaption></figure>

<p>うちは照明が全体的に暗めだが、そういう環境でもミーティングのときに顔が明るく映って嬉しい。リングフィットアドベンチャーをカメラ映像付きで配信できるようになったので、よりしっかりした姿勢を求められるようになり、毎日やってるちょっとした運動のパフォーマンスも良くなった。</p>

<p><a href="/articles/2020-09-23-web-camera">ウェブカメラ C980GR</a>でも紹介した。</p>

<h2>マイクスタンド</h2>

<p>Blue Microphonesのマイクスタンド、<a href="https://www.amazon.co.jp/dp/B0822PPK7P?tag=r7kamura07-22">Compass</a>。</p>

<figure><a href="https://i.imgur.com/0HSBSSK.jpg" target="_blank"><img src="https://i.imgur.com/0HSBSSKh.jpg" alt="" title="Blue Microphones よくばりセット"></a><figcaption>Blue Microphones よくばりセット</figcaption></figure>

<p>重いマイクでもしっかり固定してくれて、使わないときには簡単に視界外に追いやっておける。ウェブカメラもそうだけど、今年は自宅のリモートワーク環境の改善に投資することが多かった。<a href="https://yatteiki.fm/">yatteiki.fm</a>を再開したこともあって、マイクの有用性が更に高まっている。</p>

<p><a href="/articles/2020-09-16-blue-microphones-compass">マイクスタンド Compass</a>でも紹介した。</p>

<h2>キーボード</h2>

<p>ロジクールのキーボード、<a href="https://www.amazon.co.jp/dp/B088BN6JKQ?tag=r7kamura07-22">G913-TKL</a>。</p>

<figure><a href="https://i.imgur.com/F5UDOD9.jpg" target="_blank"><img src="https://i.imgur.com/F5UDOD9h.jpg" alt="" title="デバイスが、光ると、楽しい"></a><figcaption>デバイスが、光ると、楽しい</figcaption></figure>

<p>ゲーミングキーボードとして売り出されているせいかゲーマー以外への認知度が低いキーボードだけど、ゲーマーとプログラマーの中間ぐらいの層の人達と相性が良いデバイスなのではないかと思っている。非自作系で薄いものの中ではかなり好みなキーボード。<a href="/articles/2020-09-16-gaming-mouse-pad">光るマウスパッド</a>との相性もなかなか良い。何気にキートップの撥油加工が優れており、手の油脂や汚れが目立ちづらいところも実用的だ。</p>

<p><a href="/articles/2020-10-21-keyboard-g913-tkl">キーボード G913-TKL</a>でも紹介した。</p>

<h2>ハンモック</h2>

<p>VIVEREの<a href="https://www.amazon.co.jp/dp/B076R436RP?tag=r7kamura07-22">ハンモック</a>。</p>

<figure><a href="https://i.imgur.com/fWs2XNU.jpg" target="_blank"><img src="https://i.imgur.com/fWs2XNUh.jpg" alt="" title="普段はサメ置き場"></a><figcaption>普段はサメ置き場</figcaption></figure>

<p>ソファを買うより面白そうだったので、ソファの代わりにハンモックを使っている。快適な姿勢を取るのに少しコツがいるが、慣れると人をダメにするクッションを並べた上に寝ているような感覚になる。不思議とあまり眠くはならないので、少し休憩したいときや、休憩しながら何かしたいときに便利だ。</p>

<p><a href="/articles/2020-10-22-hammock">VIVEREのハンモック</a>でも紹介した。</p>

<h2>リングフィットアドベンチャー</h2>

<p>任天堂のフィットネスゲーム『<a href="https://www.amazon.co.jp/dp/B07XV8VSZT?tag=r7kamura07-22">リングフィットアドベンチャー</a>』。</p>

<figure><a href="https://i.imgur.com/cZwsFKZ.jpg" target="_blank"><img src="https://i.imgur.com/cZwsFKZh.jpg" alt="" title="182日目"></a><figcaption>182日目</figcaption></figure>

<p>2019年11月26日に購入して2020年11月23日までに182日やったので、大体2日に1回程度プレイしたことになる。自動で運動内容を記録してくれるというのはそれだけでありがたいことだ。腰痛は改善したし、生活規則や体調管理を見直すきっかけにもなった。既にストーリーモードは一旦クリアしていて、今は二周目やミニゲームを気ままにプレイしているのだけど、それでもわりと楽しいし健康に寄与している実感もある。自分のゲーム歴の中でも、一年中細かくプレイし続けたゲームというのはなかなか珍しい。</p>

<hr>

<p>もしかしたら年末までに幾つか追記するかも。加湿器、睡眠計、炊飯器、食べ物類あたりが候補だ。</p>

<p>2020年に使って良かったものという意味合いが強く、若干ながら去年末に買ったものも含まれている。買ってすぐのものを挙げるよりも、ある程度使った結果良かったものを選んだ方が良いだろうという気持ちから、こういう感じで少し時期をずらすことにした。</p>

<p>良いものは何度も言及することになる。良かったものは既に取り上げていることが多く、まとめ記事になってしまいがち。しかし単純なタグ付け等ではなく、こういう風に記事として特定の分類で各記事をまとめながら気持ちを少しずつ書き出していくというのは、書いていて得るものも多く良い活動な気がしている。</p>

<p>この記事を書くにあたり、文章の構成やHTML生成用のプログラム、画像の管理や配信方法、将来参照しやすいような記事の書き方、音声メディアやSNSでの情報発信との棲み分け方など、振り返りによって見直せるところが沢山出てきたことも良かった。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-23-good-buy-2020</guid>
    </item>
    
    <item>
      <title><![CDATA[Rubyのメソッド名]]></title>
      <description><![CDATA[Rubyでメソッドを定義するときに使う def に与えられる識別子のパターンを考えてみることにした。]]></description>
      <link>https://r7kamura.com/articles/2020-11-21-ruby-method-name</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>Rubyでメソッドを定義するときに使う <code>def</code> に与えられる識別子のパターンを考えてみることにした。</p>

<h2>パターン</h2>

<p>自分が見聞したところによると、<code>def</code> に与えられる識別子には以下のパターンがあるらしい。</p>

<ul>
<li>曰く、識別子の先頭に <code>[0-9]</code> を置いてはならない</li>
<li>曰く、識別子には <code>\w</code> を利用できる</li>
<li>曰く、識別子にはマルチバイト文字を利用しても良い</li>
<li>曰く、識別子の末尾には <code>!</code>, <code>?</code>, <code>=</code> を付随させても良い</li>
</ul>

<p>また上のパターンとは独立して、メソッドとして実装されている再定義可能な演算子のために以下の名前が許可されているらしい。</p>

<ul>
<li><code>-</code></li>
<li><code>-@</code></li>
<li><code>!</code></li>
<li><code>!=</code></li>
<li><code>!~</code></li>
<li><code>[]</code></li>
<li><code>[]=</code></li>
<li><code>*</code></li>
<li><code>**</code></li>
<li><code>/</code></li>
<li><code>&amp;</code></li>
<li><code>%</code></li>
<li><code>`</code></li>
<li><code>^</code></li>
<li><code>+</code></li>
<li><code>+@</code></li>
<li><code>&lt;</code></li>
<li><code>&lt;&lt;</code></li>
<li><code>&lt;=</code></li>
<li><code>&lt;=&gt;</code></li>
<li><code>==</code></li>
<li><code>===</code></li>
<li><code>=~</code></li>
<li><code>&gt;</code></li>
<li><code>&gt;=</code></li>
<li><code>&gt;&gt;</code></li>
<li><code>|</code></li>
<li><code>~</code></li>
</ul>

<p>これらのパターンをRubyの正規表現で整理してみる。</p>

<pre><code class="ruby">operators = %w[
  -
  -@
  !
  !=
  !~
  []
  []=
  *
  **
  /
  &amp;
  %
  `
  ^
  +
  +@
  &lt;
  &lt;&lt;
  &lt;=
  &lt;=&gt;
  ==
  ===
  =~
  &gt;
  &gt;=
  &gt;&gt;
  |
  ~
]

method_name_regexp = Regexp.union(
  /(?!\d)(?:\w|[^[:ascii:]])+[!?=]?/,
  *operators
)

/\A#{method_name_regexp}\z/
</code></pre>

<h2>メソッド定義とメソッド呼び出し</h2>

<p>今回は <code>def</code> にのみ着目したが、他にもメソッドを定義するための方法は他にも用意されている。</p>

<ul>
<li><code>define_method</code></li>
</ul>

<p>エイリアスをつくるという方法もあるので一応これも挙げておく。</p>

<ul>
<li><code>alias</code></li>
<li><code>alias_method</code></li>
</ul>

<p>呼び出し方についても、通常の方法の他に幾つかの方法が用意されている。</p>

<ul>
<li><code>__send__</code></li>
<li><code>public_send</code></li>
<li><code>send</code></li>
</ul>

<p>これらに与えられる識別子のパターンは、<code>def</code> に与えられる識別子のパターンとは異なるので注意したい。</p>

<h2>参考</h2>

<ul>
<li>
<a href="https://docs.ruby-lang.org/ja/latest/doc/spec=2fdef.html">クラス／メソッドの定義 - Rubyリファレンスマニュアル</a>

<ul>
<li>メソッド名についての記述がある</li>
</ul>
</li>
<li>
<a href="https://docs.ruby-lang.org/ja/latest/doc/spec=2fregexp.html">正規表現 - Rubyリファレンスマニュアル</a>

<ul>
<li>正規表現を利用する上で参考にした</li>
</ul>
</li>
<li>
<a href="https://en.wikipedia.org/wiki/Unicode_character_property">Unicode character property - Wikipedia</a>

<ul>
<li>Unicodeプロパティについて説明されている</li>
</ul>
</li>
<li>
<a href="https://en.wikibooks.org/wiki/Regular_Expressions/POSIX_Basic_Regular_Expressions">Regular Expressions/POSIX Basic Regular Expressions - Wikibooks</a>

<ul>
<li>POSIX文字クラスについて説明されている</li>
</ul>
</li>
<li>
<a href="https://github.com/k-takata/Onigmo/">k-takata/Onigmo</a>

<ul>
<li>Rubyの利用している正規表現エンジン</li>
</ul>
</li>
<li>
<a href="https://github.com/ruby/ruby">ruby/ruby</a>

<ul>
<li>Rubyのソースコードのミラー</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-21-ruby-method-name</guid>
    </item>
    
    <item>
      <title><![CDATA[あっちこっちふきん]]></title>
      <description><![CDATA[テイジンのあっちこっちふきんを買い替えた。]]></description>
      <link>https://r7kamura.com/articles/2020-11-18-acchikocchi-fukin</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>テイジンの<a href="https://www.amazon.co.jp/dp/B000C0UAMG?tag=r7kamura07-22">あっちこっちふきん</a>を買い替えた。</p>

<figure><a href="https://i.imgur.com/LFs2kqK.jpg" target="_blank"><img src="https://i.imgur.com/LFs2kqKh.jpg" alt="" title="あっちこっちふきん Lサイズ 薄手版"></a><figcaption>あっちこっちふきん Lサイズ 薄手版</figcaption></figure>

<p>うちは食事後すぐに食器を洗うようにしていて、洗った食器はこのふきんで拭いた後、元の場所に片付けている。大きな物や複雑な形のものは、拭いた後に少し乾かしてから戻すことが多い。珍しいほうかもしれないが、自分は皿洗い、そして食器拭きという行為が苦ではない方で、更に引越しが多かったりすることもあって自動食洗機は導入していない。</p>

<figure><a href="https://i.imgur.com/BwJWPV3.jpg" target="_blank"><img src="https://i.imgur.com/BwJWPV3h.jpg" alt="" title="乾かしたいものがコンロ周りに大集合しがち"></a><figcaption>乾かしたいものがコンロ周りに大集合しがち</figcaption></figure>

<p>皿洗いが好きなのは、子供の頃から家でよくやっていたり、レストランやホテルなどのアルバイト先や、所謂社会人となってからも職場のキッチンでよくやっていたことが影響しているかもしれない。洗い物をしたり食器を拭いたりしている間に、他愛ない話をしたり、次の予定を考えたりということをやっていて、その一連のフローを何となく好ましく捉えている。</p>

<p>長年食器を拭いてきたけれど、テイジンのあっちこっちふきんは最強のふきんの一つだと考えている。拭くときの引っ掛かりが少なく、水分や油分は取りやすいし、サイズ感も丁度良く、長方形なので掛けて干すときにも重心のバランスが良く、そして耐久力も良い。</p>

<figure><a href="https://i.imgur.com/rMkELHc.jpg" target="_blank"><img src="https://i.imgur.com/rMkELHch.jpg" alt="" title="新しいやつと古いやつの比較"></a><figcaption>新しいやつと古いやつの比較</figcaption></figure>

<p>このふきんはもともと、2012年に初めて購入した。当時はクックパッドのオフィスで働いていて、昼休みや夕方に料理をつくってはやたらと性能の良い高圧食洗機に皿を洗ってもらって拭いて仕舞うということをやっていたのだけど、オフィスで提供されている食器用のふきんの質がべらぼうに良く、これは自宅にも欲しいということで入社した月に購入した。ふきんに千円はさすがに高すぎるかもしれないけど初任給も入るし良いか、と考えながら注文したことを覚えている。</p>

<p>そして洗濯しながら使い続けて、気付いたら8年も経っていた。まだまだ使えそうな雰囲気があり、頑張ればあと10年ぐらい使えたかもしれないとは思うものの、色がくすんできて見栄えも悪いし、テイジンにお金も払いたいということで、流石に買い換えることにした。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-18-acchikocchi-fukin</guid>
    </item>
    
    <item>
      <title><![CDATA[SAO Alicization]]></title>
      <description><![CDATA[アニメ『ソードアート・オンライン アリシゼーション War of Underground』を見終えた。]]></description>
      <link>https://r7kamura.com/articles/2020-11-16-sao-alicization</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>アニメ『ソードアート・オンライン アリシゼーション War of Underground』を見終えた。</p>

<p>16話辺りまでは毎週の配信を楽しみにしながら見ていたのだけど、あるとき忙しい中でも追いつこうと流し見しようとしかけたところ、「あ、これ受動的に見ると絶対につまらなくなるやつだ」と何かを感じ取り、この作品を受け入れられる態勢が整うまで待つことにした。1ヶ月ほど経過したあたりで向き合う準備が整ったので、夏期アニメも終わり秋期アニメも数話目に入ろうかという時期になってようやく視聴を再開し、終わりまで見届けることができた次第だ。</p>

<p>個人的にソードアート・オンラインはアニメ版も小説版もアインクラッド編、つまりアニメ版的には1期の前半にあたるところにやはり思い入れが強い。各編にはそれぞれテーマ設定みたいなものが薄っすらと用意されており、アインクラッド編では「仮想世界で過ごした時間も本物である」ということが殊更に強調されているような印象を受けた。こういったテーマの提示と、それからこれは原作の構成でそうなっている事情もあるのだけど、それぞれの話が短編小説的にまとめられているという構成も、からりとした見応えがあって好みだった。</p>

<p>しかし最後まで見届けてから振り返ってみると、この2年にわたって放送されたアリシゼーション編はこれまでのベスト of ベストな全てが結実したその未来にあるものという意味で重く深い感慨があり、ここまで辿り着いた彼等・皆様・我々にとっての尊い祝福が感じられる良い作品だった。この作品も随分と大きなプロジェクトに育ってしまった感があるけれど、1期からの表現の型を頑なに守り続ける姿勢や、何かしらのテーマをもった物語にしようとしているところなんかは、この作品全体を通してすごく好ましく感じている点のひとつだ。</p>

<p>とか言ってたらアインクラッド編の前日譚的な部分を描く『ソードアート・オンライン プログレッシブ』のアニメ化が決まったようで、その後しばらくしてその第1話『星なき夜のアリア』の劇場アニメ化が報じられ、いいぞあと100クールやってくれという気持ちになっている。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-16-sao-alicization</guid>
    </item>
    
    <item>
      <title><![CDATA[Weneedfeed]]></title>
      <description><![CDATA[ウェブページからフィードを生成するweneedfeedというツールをつくった。]]></description>
      <link>https://r7kamura.com/articles/2020-11-15-weneedfeed</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>ウェブページからフィードを生成する<a href="https://github.com/r7kamura/weneedfeed">weneedfeed</a>というツールをつくった。</p>

<h2>使い方</h2>

<p>このツールはRubygemとして実装されているので、Rubyがインストールされている環境が必要になる。ツール自体はgem installでインストールできる。</p>

<pre><code>gem install weneedfeed
</code></pre>

<p>利用者には、URLとCSSセレクタをweneedfeed.ymlというYAML形式のファイルに書いてもらうことになる。例えばこのウェブサイト、r7kamura.comの新着記事のためのRSSフィードを生成しようとすると、こんな内容になる。</p>

<pre><code class="yaml">pages:
  id: r7kamuracom
  title: r7kamura.com
  url: https://r7kamura.com/
  item_selector: li
  item_description_selector: p:nth-child(3)
  item_link_selector: a
  item_time_selector: time
  item_title_selector: p:nth-child(2)
</code></pre>

<p><code>weneedfeed build</code> コマンドを利用すると、適当なRSSフィードをXMLファイルとして <code>./output</code> ディレクトリに出力できる。このファイルをどこかにホスティングして使う訳だが、RSSフィードの中では (ホスト名などの含まれた) 完全な形式のURLを使う必要があるので、このURLの生成に使う情報も引数として与える必要がある。例えば、r7kamura/weneedfeed-r7kamuracomというリポジトリを利用してGitHub Pagesにプロジェクトサイトとしてホスティングしてもらう場合はこういう感じで使う。</p>

<pre><code>weneedfeed build --base-url=https://r7kamura.github.io/weneedfeed-r7kamuracom
</code></pre>

<p>YAMLファイル記述時に手元で動作確認するために、<code>weneedfeed server</code> コマンドが用意されている。localhost:8080でHTTPサーバが立ち上がるので、ブラウザから生成物を確認できる。</p>

<pre><code>weneedfeed server
</code></pre>

<h2>weneedfeed-action</h2>

<p>YAMLファイルからweneedfeedで静的ファイルをつくってGitHub Pagesに配置するという定型的な作業を自動化するために、<a href="https://github.com/r7kamura/weneedfeed-action">weneedfeed-action</a>というGitHub Actionが用意されている。これを使うと、リポジトリにYAMLファイルを置くだけでフィードを用意できるようになる。</p>

<p>例えばこういう感じでGitHub Actions用のworkflowを定義して使う。ファイルの生成にr7kamura/weneedfeed-actionを、ファイルのデプロイにpeaceiris/actions-gh-pagesを使っている。</p>

<pre><code class="yaml"># .github/workflows/publish.yml
name: publish

on:
  push:
    branches:
      - master
  schedule:
    - cron: "15 0 * * *"

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: r7kamura/weneedfeed-action@v3
        with:
          base_url: https://r7kamura.github.io/weneedfeed-r7kamuracom
      - uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: output
</code></pre>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-15-weneedfeed</guid>
    </item>
    
    <item>
      <title><![CDATA[サイト構造変更]]></title>
      <description><![CDATA[このウェブサイトのサイト構造を少し変更し、併せてスタイルにも手を加えた。]]></description>
      <link>https://r7kamura.com/articles/2020-11-15-website-structure</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>このウェブサイトのサイト構造を少し変更し、併せてスタイルにも手を加えた。全体的に無骨で、素っ気なく、実用性重視で、打ちっぱなしだ。</p>

<h2>構造</h2>

<p>トップページにすべての記事へのリンクを並べてみることにした。</p>

<p>これまでは直近の5件の記事だけ表示していた。これまでトップページに置いていたRSSフィードや連絡先などに関する情報は、別途リンク集というページを用意し、そこに配置することにした。リンク集では個々のリンクについての簡単な説明を添えているが、このウェブサイトの輪郭を少し補足させるような役割もここに与えている。</p>

<h2>スタイル</h2>

<p>サイト構造の変更に合わせ、ヘッダーの見た目を少し変えた。</p>

<p>これまではウェブサイト名とリンクが横に並んでいたが、要素間の主従関係を明確にするために、縦方向に並べることにした。順序無しリストのデフォルトスタイルはそのまま残すことにした。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-15-website-structure</guid>
    </item>
    
    <item>
      <title><![CDATA[RuboCop 1.3.0、VSCodeのaddSelection]]></title>
      <description><![CDATA[雑記だ。]]></description>
      <link>https://r7kamura.com/articles/2020-11-12-rubocop-vscode-multi-cursor</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>雑記だ。</p>

<h2>RuboCop 1.3.0</h2>

<p>次のGem群を利用しているプロジェクトで、RuboCop関係のGemを全て最新版に上げた。</p>

<ul>
<li>guard-rubocop (1.3.0 to 1.4.0)</li>
<li>rubocop (0.93.1 to 1.3.0)</li>
<li>rubocop-rails (2.8.1 to 2.8.1)</li>
<li>rubocop-rspec (1.44.1 to 2.0.0)</li>
</ul>

<p>rubocop 1.0.0が出たときに最新版にしようと試したことがあるが、当時はguard-rubocopとrubocop-rspecが対応しておらず、すぐに対応しようとすると効率が悪そうだったので後回しにしていた。今になってその問題が解決されていたので、改めて最新版に上げることにした。</p>

<p>件のプロジェクトではrubocopは全く問題が無く、どちらかと言うとrubocop-rspec 1.44.1から2.0.0に上げたことによる非互換性への対処の方が面倒だったが、<a href="https://docs.rubocop.org/rubocop-rspec/2.0/upgrade_to_version_2.html">Upgrade to Version 2.x :: RuboCop Docs</a>というガイドもあり、実のところ大した変更でもなかった。</p>

<h2>VSCodeのCtrl+D</h2>

<p>現在カーソル下にある単語かあるいは現在選択中の単語を同ファイル内から検索し、順にその末尾にマルチカーソルを足していってくれるというeditor.action.addSelectionToNextFindMatchというコマンドがVSCodeにあり、Windows版ではCtrl+D、Mac版では確かCommand+Dのショートカットキーにこれが割り当てられている。</p>

<p>マルチカーソルは本当によく使っており、このショートカットキーもほぼ必須な機能として毎日便利に使っている。便利だという気持ちをどこかに書いておきたかった。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-12-rubocop-vscode-multi-cursor</guid>
    </item>
    
    <item>
      <title><![CDATA[RuboCop Problem Matchers]]></title>
      <description><![CDATA[RuboCop Problem MatchersというGitHub Actionをつくった。]]></description>
      <link>https://r7kamura.com/articles/2020-11-10-rubocop-problem-matchers</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p><a href="https://github.com/marketplace/actions/rubocop-problem-matchers">RuboCop Problem Matchers</a>というGitHub Actionをつくった。</p>

<h2>使い方</h2>

<p>GitHub ActionsでRuboCopを実行する前にこれを呼び出しておくと、違反内容が変更差分に注釈として表示されるようになる。</p>

<p>こういう感じで使う。</p>

<pre><code class="yaml">- uses: r7kamura/rubocop-problem-matchers-action@v1
- run: bundle exec rubocop
</code></pre>

<p>こういう感じで表示される。</p>

<figure><a href="https://i.imgur.com/AAjpgpih.png" target="_blank"><img src="https://i.imgur.com/AAjpgpih.png" alt="" title="変更差分に違反内容が表示されている様子"></a><figcaption>変更差分に違反内容が表示されている様子</figcaption></figure>

<p>GitHubの<a href="https://github.com/actions/toolkit/blob/1cc56db0ff126f4d65aeb83798852e02a2c180c3/docs/problem-matchers.md">Problem Matchers</a>という仕組みを利用している。</p>

<h2>注意点</h2>

<p>このような目的でGitHub Actionsを利用するときの注意点に触れておく。</p>

<p><code>pull_request</code> イベントを起点に動かす場合、<code>actions/checkout</code> はそのPull Requestが生成しようとしているmerge commitをチェックアウトする。これだとLinter等から報告されるコードの位置がPull Requestの差分で表示しているものとズレてしまう場合があるので、この用途で使う場合はPull RequestのHEADをチェックアウトするように設定した方が良い。</p>

<pre><code class="yaml">- uses: actions/checkout@v2
  with:
    ref: ${{ github.event.pull_request.head.sha }}
</code></pre>

<p>ちなみに、このように指定しても <code>push</code> 契機での実行時にも特に問題無く動いてくれるので、その点は心配無い。</p>

<hr>

<p>今回取り上げたRuboCop Problem Matchersのような、Problem Matchersを利用したものをつくる開発者向けに細かい情報を書いておく。</p>

<h2>エスケープシーケンス</h2>

<p>GitHub ActionsでANSIエスケープシーケンスを利用した出力を行うと、ブラウザ上で閲覧する際にもよしなに修飾されて表示される。このような太字や着色などの修飾付きの出力に対して正規表現を書く場合には、エスケープシーケンスを考慮したパターンを記述しないと上手くいかないので、注意が必要だ。</p>

<p>RuboCop Problem Matchersでは、対応も面倒そうなので色付きの出力 (<code>rubocop --color</code>) にはとりあえず未対応としている。</p>

<h2>Severity</h2>

<p>Problem Matchersではseverityという情報をキャプチャすることも出来るようになっているが、これは少なくともGitHub ChecksとGitHub Actionsの出力ログのところで黄色く表示されるか赤く表示されるかという違いに影響している。少なくとも <code>"warning"</code> のときに黄色くなり、それ以外の文字列に対しては基本的に <code>"error"</code> 相当で赤くなるということが分かった。</p>

<p>RuboCopの違反には出力で言うと <code>W</code> と <code>C</code> の2パターンがあるので、RuboCop Problem Matchersではそれぞれwarningとerrorに割り当てている。<a href="https://github.com/r7kamura/rubocop-problem-matchers-action/blob/b8ef1656b34a223cf80f04e6b45b5bb6722cef31/.github/matchers/rubocop.json">ソースコード</a>を見ると分かるが、このために2つのMatcherを用意している。それぞれのMatcherに異なる名前を割り当てており、名前を指定して特定のMatcherを無効化する機能も提供されているので、利用者側で警告だけ非表示にするなどの使い方も考えられる。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-10-rubocop-problem-matchers</guid>
    </item>
    
    <item>
      <title><![CDATA[Imgurへの緩やかな移行]]></title>
      <description><![CDATA[記事に画像を掲載するときに、Imgurを利用してみることにした。]]></description>
      <link>https://r7kamura.com/articles/2020-11-09-imgur</link>
      <pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>記事に画像を掲載するときに、<a href="https://imgur.com/">Imgur</a>を利用してみることにした。</p>

<figure><a href="https://i.imgur.com/8kai7Rn.jpg" target="_blank"><img src="https://i.imgur.com/8kai7Rnh.jpg" alt="" title="特に脈絡の無いハンバーガー（Hungry Heaven目黒店にて）"></a><figcaption>特に脈絡の無いハンバーガー（Hungry Heaven目黒店にて）</figcaption></figure>

<h2>変更点</h2>

<p>これまでは、画像ファイルをGitリポジトリに含めてGitHub Pagesに配信してもらうという素朴な方式を採用していた。これを変更して、少なくとも今後掲載する画像についてImgurに配信してもらう方式に変えてみることにした。</p>

<p>オリジナルの画像をGoogle Photosで管理するという方式は変えず、ウェブサイトに掲載したい場合はImgurにアップロードして利用する。このときExif情報は勝手に取り除かれる。Imgurが用意してくれる幅1024px版の画像URLを参照し、大きなものを見たい人向けにImgur上のオリジナル画像のURLにリンクを張る。</p>

<p>但し、主にタッチデバイスのUser-Agentで見ようとするとこのリンクはImgurのサービス上のページにリダイレクトされるようだ。また、幅1024px版の画像URLにimg要素からではなく直接ブラウザでアクセスすると404を返す場合があるようだったので、記事本文の変換機構に少し手を入れ、リンクはオリジナル画像のURLを指すようにして解決を図った。</p>

<h2>背景</h2>

<p>このウェブサイトには基本的にiPhoneで撮影した画像が掲載されることが多い。まずiPhoneで撮影したJPEG撮って出しの画像をiOSアプリ経由でGoogle Photosに同期させ、そこで色味などを若干変更したあとPCにダウンロードし、次にPC上でexiftoolを使ってExif情報を取り除き、ImageMagickを使ってウェブサイト用に適切なサイズに変換し、これをGitリポジトリに含め、記事の原稿からそのパスを適切に参照する、ということをやっていた。</p>

<p>諸々の処理操作が面倒だし、画像を含めるとGitリポジトリのサイズも増えて操作にコストが面倒になるし、GitHubの容量上限も視野に入ってくるし、誤ってExif付きのものが混入したときにGitの履歴管理が面倒だし、良さげな画像管理サービスを模索してみたいし、ということで新しいものから移行してみることにした。既存の画像をどうするかについてはまだ決めておらず、しばらくImgurを利用してみてから考えようとしている。</p>

<h2>Imgur</h2>

<p>Imgur自体はそこそこ昔からアカウントを持っていて、自分ではあまり活用できていないものの、RedditやSteamなどの海外文化圏、近年の5chなどではよく使われているなという印象で居た。一時期個人で開発していたWebサービスでImgurのAPIを利用させてもらったことがあり、そのときの体験がかなり良かったので、今回改めて舞い戻ってきた。</p>

<p>Imgurは、無料の画像管理サービスとコメント型ソーシャルコミュニティが一緒になったサービスで、寄付や資金調達、利用者による小額支援、そして広告などの収益で運営されている。画像管理をしたいという目的で初めて訪れた利用者からすると、初見ではその辺りの概念の獲得につまづきがちかもしれない。</p>

<p>SNS機能の方もどんな感じなのか興味があるので、記事用に画像をアップロードするついでに<a href="https://imgur.com/user/r7kamura/posts">そちらも試してみている</a>。「どうやって食うんだ」「でかいナイフとフォーク？」「ハンバーガーがよ」といったコメントが即付いていて非常に優しい世界。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-09-imgur</guid>
    </item>
    
    <item>
      <title><![CDATA[Amazonリンク見直し]]></title>
      <description><![CDATA[このウェブサイトのAmazonの商品ページへのリンク方法を見直した。]]></description>
      <link>https://r7kamura.com/articles/2020-11-09-amazon-link</link>
      <pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>このウェブサイトのAmazonの商品ページへのリンク方法を見直した。</p>

<h2>具体的な変更点</h2>

<p>これまで様々な形式のURLでAmazonの商品ページへのリンクを載せていたが、このURLの形式を正規化した。更に、これまで半手作業で付けたり付けなかったりしていたアソシエイトIDについても、記事の原稿には含めず、プログラム側で自動的に付与させることにした。これは予め正規化したおかげで楽に付与できるようになった。</p>

<h2>背景</h2>

<p>前にも<a href="/articles/2020-11-04-amazon-url-shortener">記事</a>で触れたように、<a href="https://chrome.google.com/webstore/detail/amazon-url-shortener/bonkcfmjkpdnieejahndognlbogaikdg">Amazon URL Shortener</a>というブラウザ拡張をつくったことが影響している。正規化したURLが簡単に手に入るようになったので、正規化前提の環境にした。</p>

<p>Amazon URL Shortenerにも、昔はアソシエイトIDを連携させる機能を付けようとしていたが、単一機能化を推奨するChromeウェブストアの文化や昨今の取締強化の風潮もあり、この機能は今となっては存在していない。そもそもアソシエイトID付きのURLはAmazonアソシエイト・プログラムに事前申請しておいたドメインでしか利用できないので、これを遵守する上では常にアソシエイトID付きのURLに書き換えたいようなケースはほぼ存在しない。</p>

<p>このウェブサイトではGoogleアナリティクスなどの分析系ツールを利用していないので、Google Search Consoleの分析結果、Amazonアソシエイト・プログラムの成果、SNSでの言及され具合あたりで見られ具合を推し量っている。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-09-amazon-link</guid>
    </item>
    
    <item>
      <title><![CDATA[CHILL OUT]]></title>
      <description><![CDATA[リラクゼーションドリンクのCHILL OUTを飲んだ。]]></description>
      <link>https://r7kamura.com/articles/2020-11-08-chill-out</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>リラクゼーションドリンクの<a href="https://butfirstchillout.com/">CHILL OUT</a>を飲んだ。</p>

<figure><a href="https://i.imgur.com/3682F2Z.jpg" target="_blank"><img src="https://i.imgur.com/3682F2Zh.jpg" alt="" title="サメとCHILL OUT"></a><figcaption>サメとCHILL OUT</figcaption></figure>

<p>味は透明感のある微炭酸の梨ジュースという感じ。微かに薬効のありそうな味が混ざっている。風呂上がりに少し落ち着いたあたりで飲むと美味しい。185mlとそこまで量は無いので、喉を潤すためにがぶがぶ飲む感じではないかも。</p>

<p>都内のコンビニや、自販機でも売られているらしい。温泉施設の自販機などにも置かれているとか。自分は<a href="https://www.amazon.co.jp/dp/B07Z8LNMFD?tag=r7kamura07-22">Amazonの6本入りのやつ</a>を手に入れた。</p>

<figure><a href="https://i.imgur.com/ccarLxd.jpg" target="_blank"><img src="https://i.imgur.com/ccarLxdh.jpg" alt="" title="梱包箱"></a><figcaption>梱包箱</figcaption></figure>

<p>これまで日中は水出しコーヒー、夜は炭酸水という感じで飲み物サイクルを回していたけれど、新たに風呂上がりに飲むものができて少し体験が良くなった。実際に効いているかどうかは対照実験していないので不明だけど、落ち着いた時間を設けるためのきっかけとして良いと思う。</p>

<p>ちなみに、純粋な梨ジュースを追い求めるなら<a href="https://www.amazon.co.jp/dp/B005LA4C6C?tag=r7kamura07-22">ヘテの梨ジュース</a>をおすすめしたい。これは京都を中心に展開している塩ホルモン屋『<a href="http://www.aje.to/">アジェ</a>』でも供される韓国の梨ジュースで、ホソを焼きながら酒の休憩にこれを飲むのがまた美味い。</p>

<figure><a href="https://i.imgur.com/hzBVtg1.jpg" target="_blank"><img src="https://i.imgur.com/hzBVtg1h.jpg" alt="" title="パソコンとCHILL OUT"></a><figcaption>パソコンとCHILL OUT</figcaption></figure>

<p>元々は株式会社I-neがCHILL OUTをつくっていて、後に日本コカ･コーラ株式会社の出資を受けながら合同会社Endianがつくられ、今はそこがCHILL OUT業をやっている、という経緯らしい。</p>

<p><a href="https://note.com/mefilas/n/n355602907ce2">「CHILL OUT」ブランドサイトのつくりかた</a>というnoteの記事が面白かった。魔法部などのブランドサイトも手掛けているMEFILASさんのところの記事。こういう風に裏側の様子が透けて見えるのは面白い。</p>

<p>それから、近年のリラックス方法に関する<a href="https://butfirstchillout.com/news/12/">調査結果</a>がCHILL OUTのブランドサイトで公開されていて、これがなかなか丁寧にまとめられていて面白かった。本能型のストレス発散行動が減っているというのは、体験や見聞の様子と一致している感覚があり興味深い。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-08-chill-out</guid>
    </item>
    
    <item>
      <title><![CDATA[画像のキャプション title属性編]]></title>
      <description><![CDATA[画像にキャプションを付ける方法をまた変えた。]]></description>
      <link>https://r7kamura.com/articles/2020-11-07-image-caption-revised</link>
      <pubDate>Sat, 07 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>画像にキャプションを付ける方法をまた変えた。画像にキャプションを付け始めたのは2020年9月のことで、<a href="/articles/2020-09-22-markdown-caption">当時も記事を書いた</a>。</p>

<figure><a href="/images/2020-11-07-image-caption.jpg" target="_blank"><img src="/images/2020-11-07-image-caption.jpg" alt="" title="今日の朝食"></a><figcaption>今日の朝食</figcaption></figure>

<p>以前までは、画像とテキストが並んだひとまとまりの段落があれば、つまりimg要素とテキストノードだけを含むp要素があれば、それをfigure要素に変換するということをしていた。</p>

<pre><code>![](/images/2020-11-07-image-caption.jpg)
今日の朝食
</code></pre>

<p>今回は、img要素のtitle属性を使うように変更した。</p>

<pre><code>![](/images/2020-11-07-image-caption.jpg "今日の朝食")
</code></pre>

<p>この用途でのtitle属性の利用には議論の余地があるかもしれないが、title属性はCommonMarkなどのMarkdown仕様にも含められているので、少なくとも変換過程で使うにはレバレッジが効きやすくて良さそうだ。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-07-image-caption-revised</guid>
    </item>
    
    <item>
      <title><![CDATA[ウォッチパーティー]]></title>
      <description><![CDATA[初めてウォッチパーティーを使った。]]></description>
      <link>https://r7kamura.com/articles/2020-11-05-watch-party</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>初めてウォッチパーティーを使った。</p>

<p>Amazonプライムビデオで配信されている動画を、プライム会員同士で同期しながら観たりできるやつ。PC用のWebブラウザで、Amazonプライムビデオからぽちぽちやると簡単に使える。発行されたURLを伝えて、適当に再生するだけ。</p>

<p>チャット欄もあるので、上映中に会話することに気が引ける人でも安心。Discordで友達と通話しながら観ていたのだけど、自分も気になる派なのでマイクはミュートしてテキストで反応していた。音声は基本的に1チャンネルしかないから、テキストでやりとりする方が無限に会話できて気楽だ。</p>

<h2>名探偵ピカチュウ</h2>

<p>ウォッチパーティーで映画『名探偵ピカチュウ』を観た。もちろん良かった。色々な洋画へのオマージュがあって、盤外戦術でも盛り上がれる感じの映画だ。随所でカメラワークが良かった。</p>

<h2>南極料理人</h2>

<p>次の祝日に、今度はウォッチパーティーで映画『南極料理人』を観た。当然ながら良かった。若干ながら見る人を選ぶかもしれないが、やさしさを持って観ることをおすすめする。実体験からくるネタの豊富さと、日本の漫画のコマ割りに通じるようなテンポの良さが印象的だった。この日はごはんが進んだ。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-05-watch-party</guid>
    </item>
    
    <item>
      <title><![CDATA[Amazon URL Shortener]]></title>
      <description><![CDATA[Amazon URL ShortenerというChrome拡張をつくった。]]></description>
      <link>https://r7kamura.com/articles/2020-11-04-amazon-url-shortener</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p><a href="https://chrome.google.com/webstore/detail/amazon-url-shortener/bonkcfmjkpdnieejahndognlbogaikdg">Amazon URL Shortener</a>というChrome拡張をつくった。</p>

<p>これを入れると、Amazonの商品ページにアクセスしたときに、ロケーションバーに表示されるURLを自動的に短いものに書き換えてくれる。商品のURLを共有するときに、長ったらしいURLにならずに済んで嬉しい。</p>

<h2>開発の背景</h2>

<p>実はAmazon URL Modifierという前身となるChrome拡張を2013年頃からつくっていた。</p>

<ul>
<li><a href="/articles/2014-08-04-h">Amazon URL Modifier</a></li>
<li><a href="/articles/2016-06-23-h">Amazon URL ModifierのHTTPS対応</a></li>
</ul>

<p>今回ひさしぶりに見直して、不要な機能を取り除いて名前を変えたり、日本以外の18地域用のAmazonのサイトにも対応したり、申請用の画像やテキストの管理体制を整えたりして、最終的にChromeウェブストアに公開するに至った。</p>

<p>なぜ今になってこの改善に着手したのかというと、ハロウィンでGitHubのプロフィールページがオレンジ色になったから。あらためて<a href="https://github.com/r7kamura">自分のプロフィールページ</a>や<a href="https://github.com/sponsors/r7kamura">スポンサー募集ページ</a>を眺めていて、過去につくったものを見直すことで何か価値を提供できるのではないか、という発想でこの活動に至った。このところ毎週土曜日に個人的なハッカソンをやっているので、そこでまとまった時間とモチベーションを確保できた。</p>

<h2>いろいろなAmazon</h2>

<p>対応も簡単そうだったので、今回を機にamazon.co.jp以外でもこの拡張を使えるようにした。<a href="https://www.amazon.co.jp/gp/navigation-country/">Amazonのサイト切り替え機能</a>で調べた限りでは、少なくとも現状これだけのドメインでAmazonのショッピングサイトが提供されている。</p>

<ul>
<li><a href="http://www.amazon.ae">www.amazon.ae</a></li>
<li><a href="http://www.amazon.au">www.amazon.au</a></li>
<li><a href="http://www.amazon.ca">www.amazon.ca</a></li>
<li><a href="http://www.amazon.cn">www.amazon.cn</a></li>
<li><a href="http://www.amazon.co.jp">www.amazon.co.jp</a></li>
<li><a href="http://www.amazon.co.uk">www.amazon.co.uk</a></li>
<li><a href="http://www.amazon.com">www.amazon.com</a></li>
<li><a href="http://www.amazon.com.br">www.amazon.com.br</a></li>
<li><a href="http://www.amazon.com.mx">www.amazon.com.mx</a></li>
<li><a href="http://www.amazon.com.tr">www.amazon.com.tr</a></li>
<li><a href="http://www.amazon.de">www.amazon.de</a></li>
<li><a href="http://www.amazon.es">www.amazon.es</a></li>
<li><a href="http://www.amazon.fr">www.amazon.fr</a></li>
<li><a href="http://www.amazon.in">www.amazon.in</a></li>
<li><a href="http://www.amazon.it">www.amazon.it</a></li>
<li><a href="http://www.amazon.nl">www.amazon.nl</a></li>
<li><a href="http://www.amazon.sa">www.amazon.sa</a></li>
<li><a href="http://www.amazon.se">www.amazon.se</a></li>
<li><a href="http://www.amazon.sg">www.amazon.sg</a></li>
</ul>

<p>いろいろあって楽しい。中国版 (.cn) なんかは見た目がわりと違って面白い。しかしURLやサイトの構造はほぼ変わらないらしく、対応自体は容易だった。</p>

<h2>申請用リソースの管理</h2>

<p>今回この拡張を申請するにあたり、画像やテキストなどのChromeウェブストアへの申請時に利用するリソース管理の透明性には少し気を配った。具体的には、申請時に利用したテキストは全てリポジトリ内にそのコピーを含めるようにした。またアイコンについても、そこまで凝ったものを用意したいとも思わなかったので、ImageMagickで機械的に生成し、その方法もスクリプトとしてリポジトリに残すようにした。</p>

<figure><a href="/images/2020-11-04-amazon-url-shortener.png" target="_blank"><img src="/images/2020-11-04-amazon-url-shortener.png" alt="" title="用意したアイコン"></a><figcaption>用意したアイコン</figcaption></figure>

<h2>ブラウザ拡張の開発事情</h2>

<p>昔と比べると、ブラウザ拡張の仕様も随分と落ち着いており、また拡張の設定画面やデバッグ用の機能、Chromeウェブストアのダッシュボードの機能なんかも充実しているので、コードを書く上での困りどころは随分減っている。</p>

<p>どちらかと言うと、開発自体が非常に簡単になった分、Chromeウェブストアの審査に対応することの大変さが浮き彫りになっている印象がある。自分も何度かChrome拡張をストアから取り下げられたことがあるが、要領を得ない定型文的な回答に疲弊することも多く、<a href="https://blogja.gyazo.com/entry/2020/07/29/173000">Gyazo Chrome Extensionの再公開について</a>などを読んでもこの状況は今でも大きくは改善されていないようで、その辺りは少し残念に感じた。とはいえ、これでも数年前の状況よりは大きく改善されている。</p>

<p>ちなみにこの拡張も、第一次申請時には「アイテムの説明に過剰かつ / または無関係なキーワードが含まれている」という理由で不承認になったが、説明文を改善して再審査を受けることで承認された。<a href="https://github.com/r7kamura/amazon_url_shortener/issues/4">GitHubのIssue</a>に詳しい経緯をまとめてある。</p>

<p>何か状況をもっと良くしていくことはできると思うので、めげずにChrome拡張の開発を続けたりフィードバックを送り続けたりして改善に貢献したいと思う。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-04-amazon-url-shortener</guid>
    </item>
    
    <item>
      <title><![CDATA[炊飯器 象印NW-ES07-BZ]]></title>
      <description><![CDATA[象印のNW-ES07-BZという炊飯器を買った。]]></description>
      <link>https://r7kamura.com/articles/2020-11-03-rice-cooker</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>象印の<a href="https://www.amazon.co.jp/dp/B07TWC6C2D?tag=r7kamura07-22">NW-ES07-BZ</a>という炊飯器を買った。</p>

<figure><a href="/images/2020-11-03-rice-cooker.jpg" target="_blank"><img src="/images/2020-11-03-rice-cooker.jpg" alt="" title="NW-ES07-BZ"></a><figcaption>NW-ES07-BZ</figcaption></figure>

<p>炊飯器については門外漢すぎて特に選定基準が無く、象印かパナソニックの2019年から2020年あたりの機種で悩んでいたが、最終的に<a href="https://blog.sushi.money/entry/2020/07/20/205525">ひとでさんが使っている</a>という情報も加味してこれになった。しばらく使ったがかなり気に入っている。米がおいしくてすごい。炊きたての米だけ食べておかわりできる程度にはうまい。</p>

<p>思い返せば今年の1月頃、Discordで所属しているサーバーの抱負2020というチャンネルに「炊飯器を買い換える」と書き残していた。たぶん年始から飲んで酔っていたのだろう。思いがけず特別定額給付金という後押しも加わり、遂にこの抱負を達成できた。</p>

<p>5年ほど利用する計画で居る。過去5年間を振り返ると、1回あたり2合の米を年間150回ほど炊いている。そうすると、5年で750回炊飯することになる。Amazonでこの炊飯器が大体6万円で売られていたから、1回2合の米を炊くのに+80円という計算になる。自分はこのところ2合あたり176円の米を食べていたが、たとえばこれを令和2年産魚沼産コシヒカリのいいやつに変更しようとすると、2合あたり300円ほどになり、1回2合の米を炊くのに+124円という計算になる。つまり5年間米を良いものに変更するよりは安いぐらいの出費だ。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-03-rice-cooker</guid>
    </item>
    
    <item>
      <title><![CDATA[ルックプラス バスタブクレンジング]]></title>
      <description><![CDATA[ルックプラス バスタブクレンジング 銀イオンプラスを手に入れた。]]></description>
      <link>https://r7kamura.com/articles/2020-11-02-lookplus</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p><a href="https://www.amazon.co.jp/dp/B0851YMDNN?tag=r7kamura07-22">ルックプラス バスタブクレンジング 銀イオンプラス</a>を手に入れた。</p>

<figure><a href="/images/2020-11-02-lookplus.jpg" target="_blank"><img src="/images/2020-11-02-lookplus.jpg" alt="" title="スプレーボトルと詰替え用のそれ"></a><figcaption>スプレーボトルと詰替え用のそれ</figcaption></figure>

<p>ルックプラス バスタブクレンジングは、浴槽にスプレーして1分後にシャワーで流すだけで汚れが簡単に落ちるというやつで、ここ2年ほど見聞している限りでもかなり人気の高いやつ。自分も使い続けていて、その性能にはかなり満足している。不満点と言えば、最近<a href="/articles/2020-10-11-hanging-shampoo">浴室に置くものを見直した</a>りしたこともあってパッケージの主張が強くなりすぎてしまうことと、わりとすぐに空になってしまうので何となく勿体無い気持ちになってしまうことが不満なぐらいだった。</p>

<p>銀イオンプラスという新しいシリーズが販売されるようになっていたので、この機会に適当なスプレーボトルと一緒に詰め替えのものを買っておこう、ということでAmazonでそれぞれ見繕って購入した。ちなみに、こういった複数個でしか手に入れられない詰替え商品の余りや食品の備蓄みたいなものは収納場所に困りがちなので、自分はウォーキングクローゼットや玄関付近にそれぞれ格納することにしている。衣服や靴をほとんど持たないので、その辺の空間が余りがちだ。</p>

<p>Amazonスプレーボトル探しあるあるなのだけど、こういうものを探すと海外製の似たような商品が無数に出てきて、なぜか大体2個セットで売られている。昨今の情勢もあって、アルコール散布剤として色々な商品が急激に増えたらしい。ルックプラス バスタブクレンジングの詰め替えサイズは最小でも450mlなので、500mlで安くてスプレーからしっかり霧状のものが散布されそうなものを適当に選んで購入した。</p>

<p>いざ詰め替える段階になって思ったのだが、透明ではないボトルだと中が見えないので、溢れそうとか減ってきたとかが分からない。これから買う人には半透明のものをおすすめしたい。購入したものはしっかりその仕事を果たしてくれてこそいるが、正直販売元も製造元も性能もそこまで信頼ならず、他人に勧められるようなものではないので、共通規格としては無印良品の<a href="https://www.muji.com/jp/ja/store/cmdty/detail/4945247390261">ポリボトル スプレー付 500ml</a>あたりを買っておくのがおすすめだ。この辺もAmazonで販売されるようになってくれると嬉しいものだ。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-11-02-lookplus</guid>
    </item>
    
    <item>
      <title><![CDATA[gemやnpmの所有者追加]]></title>
      <description><![CDATA[rubygems.orgやnpmjs.comに登録しているパッケージの所有者を追加する方法について。]]></description>
      <link>https://r7kamura.com/articles/2020-10-31-adding-owner-of-gem-and-npm</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p>rubygems.orgやnpmjs.comに登録しているパッケージの所有者を追加する方法について。</p>

<h2>概要</h2>

<p>それぞれのサイトから追加できる。</p>

<h2>背景</h2>

<p>以前所属していた組織から、幾つかのgemやnpmパッケージにうちの組織用の所有者を追加してくれないかという依頼を受け、やり方をあらためて調べながら作業する機会があったので、書き記しておくことにした。</p>

<h2>rubygems.org</h2>

<p>所有者管理ページにて、所有者として追加したいアカウントに紐付くメールアドレスかアカウント名を入力すると、そのアカウントのメールアドレスに承認用のメールが送信される。それを利用して48時間以内に承認してもらえれば、無事所有者として登録される。</p>

<p>rubygems.orgのサイトで、そのやり方が説明されている。</p>

<figure>
  <blockquote>
    <p>Adding user as an owner to your gem</p>
    <p>Step: 1 Enter the email or handle of the user in the text field labels Email/Handle and click Add Owner.</p>
    <p>Step: 2 The user added as an owner will be sent an email with a link to confirm the ownership. The ownership will be confirmed after the user clicks on the confirmation link within 48 hours. On confirmation, all the existing owners will be notified about the owner addition.</p>
    <p>Note that the user won’t have access to the gem until they confirm the ownership addition.</p>
  </blockquote>
  <figcaption><a href="https://guides.rubygems.org/managing-owners-using-ui/">Managing Owners via UI - RubyGems Guides</a></figcaption>
</figure>

<h2>npmjs.com</h2>

<p>パッケージの設定ページで、所有者として追加したいアカウントの名前を入力すれば、その時点で所有者として登録される。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-10-31-adding-owner-of-gem-and-npm</guid>
    </item>
    
    <item>
      <title><![CDATA[rack-ok]]></title>
      <description><![CDATA[rack-okというGemをつくった。]]></description>
      <link>https://r7kamura.com/articles/2020-10-30-rack-ok</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      <content:encoded><![CDATA[<p><a href="https://github.com/r7kamura/rack-ok">rack-ok</a>というGemをつくった。</p>

<h2>概要</h2>

<p>何かというと、GET /healthに対して200 OKを返すだけのRackミドルウェア。冗談みたいなプログラムだけど、今更Rackの世界に入門してハローワールドしたかった訳ではなくて、ロードバランサーからのヘルスチェックに応答させるために、こういう実装が必要になる機会がそれなりにある。</p>

<h2>背景</h2>

<p>Railsアプリとかだと、こういうのは（適切なという意味ではなく雑なという意味で）適当なコントローラで実装されたりするのだけど、機能てんこ盛りのコントローラで200を返すだけの処理をやるのはどうにも無駄が多い。それに、ヘルスチェックはHTTPでリクエストが飛んでくるので、SSL対応用の機能を有効化しようとするとヘルスチェック用のエンドポイントだけ確認対象から除外する必要が出てきたりする。Rackミドルウェアだと、その辺の問題が解決できる。</p>

<p>ヘルスチェック用のRackミドルウェアとしては他に<a href="https://github.com/mirakui/rack-health">rack-health</a>というのがあり、自分も長らく愛用していた。色々と運用していると、動的にレスポンスを切り替えたりするような機能はこの層には不要だなと思うことも多く、200を返す機能さえあれば十分だろうということで、こういうものを自作するに至った。似たようなものが無数にあるだろうと思うので、その中の一つに過ぎない。</p>

<p>各アプリで独自のパス (/healthや/health_check) と独自のレスポンスボディ (OKやhealthやIt works!) を現状利用しており、それらをいきなり変える訳にはいかないと思うので、一応パスとレスポンスボディはオプションで変更できるようにしてある。200を返すというところは変えられないので、それがrack-okのOKたるアイデンティティとなっている。</p>

<h2>名前</h2>

<p>最初はrack-health_checkという名前で開発を進めていたが、rack-healthcheckという名前のgemが存在するとrack-health_checkという名前のgemはリリースできないという事実がリリース時のエラーで発覚し、急遽再考してrack-okに変更した。今となってはrack-okの方が良かったと思う。</p>
]]></content:encoded>
      <guid>https://r7kamura.com/articles/2020-10-30-rack-ok</guid>
    </item>
    
  </channel>
</rss>
